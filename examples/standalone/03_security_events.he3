domain app.security;

import system.events.*;

// Security key declaration
security key UserModuleKey = "user_security_key_12345";

// Event definitions
let userLoginEvent = EventManager.createEvent<UserLoginEvent>("user.login");
let userLogoutEvent = EventManager.createEvent<UserLogoutEvent>("user.logout");

record UserLoginEvent {
  var userId: string;
  var timestamp: integer;
  var ipAddress: string;
}

record UserLogoutEvent {
  var userId: string;
  var timestamp: integer;
  var sessionDuration: integer;
}

class UserManager {
  var activeUsers: Array<string>;
  
  constructor() {
    this.activeUsers = new Array<string>();
  }
  
  function loginUser(userId: string, ipAddress: string): Result<User, string> {
    // Simulate user authentication
    if (userId.length == 0) {
      return Err("Invalid user ID");
    }
    
    // Add user to active list
    this.activeUsers.append(userId);
    
    // Publish login event
    userLoginEvent.publish(UserLoginEvent {
      userId: userId,
      timestamp: System.currentTimeMillis(),
      ipAddress: ipAddress
    });
    
    return Ok(new User(userId));
  }
  
  function logoutUser(userId: string): Result<void, string> {
    // Remove user from active list
    let index = this.activeUsers.indexOf(userId);
    if (index == -1) {
      return Err("User not found");
    }
    
    this.activeUsers.removeAt(index);
    
    // Publish logout event
    userLogoutEvent.publish(UserLogoutEvent {
      userId: userId,
      timestamp: System.currentTimeMillis(),
      sessionDuration: 3600 // 1 hour in seconds
    });
    
    return Ok(());
  }
}

class User {
  var id: string;
  var loginTime: integer;
  
  constructor(id: string) {
    this.id = id;
    this.loginTime = System.currentTimeMillis();
  }
  
  function getId(): string {
    return this.id;
  }
}

class Program {
  function main(): integer {
    // Subscribe to events
    userLoginEvent.subscribe(function(event: UserLoginEvent) {
      print("User logged in: " + event.userId + " from " + event.ipAddress);
    });
    
    userLogoutEvent.subscribe(function(event: UserLogoutEvent) {
      print("User logged out: " + event.userId + " (session: " + event.sessionDuration + "s)");
    });
    
    // Test user management
    let userManager = new UserManager();
    
    match (userManager.loginUser("alice", "192.168.1.100")) {
      Ok(user) => {
        print("Login successful for user: " + user.getId());
      }
      Err(error) => {
        print("Login failed: " + error);
      }
    }
    
    match (userManager.logoutUser("alice")) {
      Ok(()) => {
        print("Logout successful");
      }
      Err(error) => {
        print("Logout failed: " + error);
      }
    }
    
    return 0;
  }
}
